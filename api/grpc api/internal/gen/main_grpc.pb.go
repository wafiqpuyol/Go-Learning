// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: main.proto

package mainpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeacherService_CreateTeachers_FullMethodName                = "/main.TeacherService/CreateTeachers"
	TeacherService_GetTeachers_FullMethodName                   = "/main.TeacherService/GetTeachers"
	TeacherService_UpdateTeachers_FullMethodName                = "/main.TeacherService/UpdateTeachers"
	TeacherService_DeleteTeachers_FullMethodName                = "/main.TeacherService/DeleteTeachers"
	TeacherService_GetStudentsByClassTeacher_FullMethodName     = "/main.TeacherService/GetStudentsByClassTeacher"
	TeacherService_GetStudentCountByClassTeacher_FullMethodName = "/main.TeacherService/GetStudentCountByClassTeacher"
)

// TeacherServiceClient is the client API for TeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherServiceClient interface {
	CreateTeachers(ctx context.Context, in *Teachers, opts ...grpc.CallOption) (*Teachers, error)
	GetTeachers(ctx context.Context, in *GetTeacherRequest, opts ...grpc.CallOption) (*Teachers, error)
	UpdateTeachers(ctx context.Context, in *Teachers, opts ...grpc.CallOption) (*Teachers, error)
	DeleteTeachers(ctx context.Context, in *TeacherIds, opts ...grpc.CallOption) (*DeleteTeachersConfirmation, error)
	GetStudentsByClassTeacher(ctx context.Context, in *TeacherId, opts ...grpc.CallOption) (*Students, error)
	GetStudentCountByClassTeacher(ctx context.Context, in *TeacherId, opts ...grpc.CallOption) (*StudentCount, error)
}

type teacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherServiceClient(cc grpc.ClientConnInterface) TeacherServiceClient {
	return &teacherServiceClient{cc}
}

func (c *teacherServiceClient) CreateTeachers(ctx context.Context, in *Teachers, opts ...grpc.CallOption) (*Teachers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Teachers)
	err := c.cc.Invoke(ctx, TeacherService_CreateTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) GetTeachers(ctx context.Context, in *GetTeacherRequest, opts ...grpc.CallOption) (*Teachers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Teachers)
	err := c.cc.Invoke(ctx, TeacherService_GetTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) UpdateTeachers(ctx context.Context, in *Teachers, opts ...grpc.CallOption) (*Teachers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Teachers)
	err := c.cc.Invoke(ctx, TeacherService_UpdateTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) DeleteTeachers(ctx context.Context, in *TeacherIds, opts ...grpc.CallOption) (*DeleteTeachersConfirmation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTeachersConfirmation)
	err := c.cc.Invoke(ctx, TeacherService_DeleteTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) GetStudentsByClassTeacher(ctx context.Context, in *TeacherId, opts ...grpc.CallOption) (*Students, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Students)
	err := c.cc.Invoke(ctx, TeacherService_GetStudentsByClassTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) GetStudentCountByClassTeacher(ctx context.Context, in *TeacherId, opts ...grpc.CallOption) (*StudentCount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentCount)
	err := c.cc.Invoke(ctx, TeacherService_GetStudentCountByClassTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServiceServer is the server API for TeacherService service.
// All implementations must embed UnimplementedTeacherServiceServer
// for forward compatibility.
type TeacherServiceServer interface {
	CreateTeachers(context.Context, *Teachers) (*Teachers, error)
	GetTeachers(context.Context, *GetTeacherRequest) (*Teachers, error)
	UpdateTeachers(context.Context, *Teachers) (*Teachers, error)
	DeleteTeachers(context.Context, *TeacherIds) (*DeleteTeachersConfirmation, error)
	GetStudentsByClassTeacher(context.Context, *TeacherId) (*Students, error)
	GetStudentCountByClassTeacher(context.Context, *TeacherId) (*StudentCount, error)
	mustEmbedUnimplementedTeacherServiceServer()
}

// UnimplementedTeacherServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeacherServiceServer struct{}

func (UnimplementedTeacherServiceServer) CreateTeachers(context.Context, *Teachers) (*Teachers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeachers not implemented")
}
func (UnimplementedTeacherServiceServer) GetTeachers(context.Context, *GetTeacherRequest) (*Teachers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeachers not implemented")
}
func (UnimplementedTeacherServiceServer) UpdateTeachers(context.Context, *Teachers) (*Teachers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeachers not implemented")
}
func (UnimplementedTeacherServiceServer) DeleteTeachers(context.Context, *TeacherIds) (*DeleteTeachersConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeachers not implemented")
}
func (UnimplementedTeacherServiceServer) GetStudentsByClassTeacher(context.Context, *TeacherId) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByClassTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) GetStudentCountByClassTeacher(context.Context, *TeacherId) (*StudentCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentCountByClassTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) mustEmbedUnimplementedTeacherServiceServer() {}
func (UnimplementedTeacherServiceServer) testEmbeddedByValue()                        {}

// UnsafeTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServiceServer will
// result in compilation errors.
type UnsafeTeacherServiceServer interface {
	mustEmbedUnimplementedTeacherServiceServer()
}

func RegisterTeacherServiceServer(s grpc.ServiceRegistrar, srv TeacherServiceServer) {
	// If the following call pancis, it indicates UnimplementedTeacherServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeacherService_ServiceDesc, srv)
}

func _TeacherService_CreateTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teachers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).CreateTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_CreateTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).CreateTeachers(ctx, req.(*Teachers))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_GetTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).GetTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_GetTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).GetTeachers(ctx, req.(*GetTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_UpdateTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Teachers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).UpdateTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_UpdateTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).UpdateTeachers(ctx, req.(*Teachers))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_DeleteTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).DeleteTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_DeleteTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).DeleteTeachers(ctx, req.(*TeacherIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_GetStudentsByClassTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).GetStudentsByClassTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_GetStudentsByClassTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).GetStudentsByClassTeacher(ctx, req.(*TeacherId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_GetStudentCountByClassTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).GetStudentCountByClassTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_GetStudentCountByClassTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).GetStudentCountByClassTeacher(ctx, req.(*TeacherId))
	}
	return interceptor(ctx, in, info, handler)
}

// TeacherService_ServiceDesc is the grpc.ServiceDesc for TeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.TeacherService",
	HandlerType: (*TeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeachers",
			Handler:    _TeacherService_CreateTeachers_Handler,
		},
		{
			MethodName: "GetTeachers",
			Handler:    _TeacherService_GetTeachers_Handler,
		},
		{
			MethodName: "UpdateTeachers",
			Handler:    _TeacherService_UpdateTeachers_Handler,
		},
		{
			MethodName: "DeleteTeachers",
			Handler:    _TeacherService_DeleteTeachers_Handler,
		},
		{
			MethodName: "GetStudentsByClassTeacher",
			Handler:    _TeacherService_GetStudentsByClassTeacher_Handler,
		},
		{
			MethodName: "GetStudentCountByClassTeacher",
			Handler:    _TeacherService_GetStudentCountByClassTeacher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
